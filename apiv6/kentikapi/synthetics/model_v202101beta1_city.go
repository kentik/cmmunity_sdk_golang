/*
 * Synthetics Monitoring API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 202101beta1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synthetics

import (
	"encoding/json"
)

// V202101beta1City struct for V202101beta1City
type V202101beta1City struct {
	Id   *string  `json:"id,omitempty"`
	Name *string  `json:"name,omitempty"`
	Lat  *float64 `json:"lat,omitempty"`
	Long *float64 `json:"long,omitempty"`
}

// NewV202101beta1City instantiates a new V202101beta1City object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV202101beta1City() *V202101beta1City {
	this := V202101beta1City{}
	return &this
}

// NewV202101beta1CityWithDefaults instantiates a new V202101beta1City object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV202101beta1CityWithDefaults() *V202101beta1City {
	this := V202101beta1City{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V202101beta1City) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1City) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V202101beta1City) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *V202101beta1City) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V202101beta1City) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1City) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V202101beta1City) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V202101beta1City) SetName(v string) {
	o.Name = &v
}

// GetLat returns the Lat field value if set, zero value otherwise.
func (o *V202101beta1City) GetLat() float64 {
	if o == nil || o.Lat == nil {
		var ret float64
		return ret
	}
	return *o.Lat
}

// GetLatOk returns a tuple with the Lat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1City) GetLatOk() (*float64, bool) {
	if o == nil || o.Lat == nil {
		return nil, false
	}
	return o.Lat, true
}

// HasLat returns a boolean if a field has been set.
func (o *V202101beta1City) HasLat() bool {
	if o != nil && o.Lat != nil {
		return true
	}

	return false
}

// SetLat gets a reference to the given float64 and assigns it to the Lat field.
func (o *V202101beta1City) SetLat(v float64) {
	o.Lat = &v
}

// GetLong returns the Long field value if set, zero value otherwise.
func (o *V202101beta1City) GetLong() float64 {
	if o == nil || o.Long == nil {
		var ret float64
		return ret
	}
	return *o.Long
}

// GetLongOk returns a tuple with the Long field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1City) GetLongOk() (*float64, bool) {
	if o == nil || o.Long == nil {
		return nil, false
	}
	return o.Long, true
}

// HasLong returns a boolean if a field has been set.
func (o *V202101beta1City) HasLong() bool {
	if o != nil && o.Long != nil {
		return true
	}

	return false
}

// SetLong gets a reference to the given float64 and assigns it to the Long field.
func (o *V202101beta1City) SetLong(v float64) {
	o.Long = &v
}

func (o V202101beta1City) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Lat != nil {
		toSerialize["lat"] = o.Lat
	}
	if o.Long != nil {
		toSerialize["long"] = o.Long
	}
	return json.Marshal(toSerialize)
}

type NullableV202101beta1City struct {
	value *V202101beta1City
	isSet bool
}

func (v NullableV202101beta1City) Get() *V202101beta1City {
	return v.value
}

func (v *NullableV202101beta1City) Set(val *V202101beta1City) {
	v.value = val
	v.isSet = true
}

func (v NullableV202101beta1City) IsSet() bool {
	return v.isSet
}

func (v *NullableV202101beta1City) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV202101beta1City(val *V202101beta1City) *NullableV202101beta1City {
	return &NullableV202101beta1City{value: val, isSet: true}
}

func (v NullableV202101beta1City) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV202101beta1City) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
