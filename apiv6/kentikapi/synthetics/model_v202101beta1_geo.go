/*
 * Synthetics Monitoring API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 202101beta1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synthetics

import (
	"encoding/json"
)

// V202101beta1Geo struct for V202101beta1Geo
type V202101beta1Geo struct {
	Country *V202101beta1Country `json:"country,omitempty"`
	Region  *V202101beta1Region  `json:"region,omitempty"`
	City    *V202101beta1City    `json:"city,omitempty"`
}

// NewV202101beta1Geo instantiates a new V202101beta1Geo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV202101beta1Geo() *V202101beta1Geo {
	this := V202101beta1Geo{}
	return &this
}

// NewV202101beta1GeoWithDefaults instantiates a new V202101beta1Geo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV202101beta1GeoWithDefaults() *V202101beta1Geo {
	this := V202101beta1Geo{}
	return &this
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *V202101beta1Geo) GetCountry() V202101beta1Country {
	if o == nil || o.Country == nil {
		var ret V202101beta1Country
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1Geo) GetCountryOk() (*V202101beta1Country, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *V202101beta1Geo) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given V202101beta1Country and assigns it to the Country field.
func (o *V202101beta1Geo) SetCountry(v V202101beta1Country) {
	o.Country = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *V202101beta1Geo) GetRegion() V202101beta1Region {
	if o == nil || o.Region == nil {
		var ret V202101beta1Region
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1Geo) GetRegionOk() (*V202101beta1Region, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *V202101beta1Geo) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given V202101beta1Region and assigns it to the Region field.
func (o *V202101beta1Geo) SetRegion(v V202101beta1Region) {
	o.Region = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *V202101beta1Geo) GetCity() V202101beta1City {
	if o == nil || o.City == nil {
		var ret V202101beta1City
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1Geo) GetCityOk() (*V202101beta1City, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *V202101beta1Geo) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given V202101beta1City and assigns it to the City field.
func (o *V202101beta1Geo) SetCity(v V202101beta1City) {
	o.City = &v
}

func (o V202101beta1Geo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	return json.Marshal(toSerialize)
}

type NullableV202101beta1Geo struct {
	value *V202101beta1Geo
	isSet bool
}

func (v NullableV202101beta1Geo) Get() *V202101beta1Geo {
	return v.value
}

func (v *NullableV202101beta1Geo) Set(val *V202101beta1Geo) {
	v.value = val
	v.isSet = true
}

func (v NullableV202101beta1Geo) IsSet() bool {
	return v.isSet
}

func (v *NullableV202101beta1Geo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV202101beta1Geo(val *V202101beta1Geo) *NullableV202101beta1Geo {
	return &NullableV202101beta1Geo{value: val, isSet: true}
}

func (v NullableV202101beta1Geo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV202101beta1Geo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
