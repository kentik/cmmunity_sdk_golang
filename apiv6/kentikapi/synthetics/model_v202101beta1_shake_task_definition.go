/*
 * Synthetics Monitoring API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 202101beta1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synthetics

import (
	"encoding/json"
)

// V202101beta1ShakeTaskDefinition struct for V202101beta1ShakeTaskDefinition
type V202101beta1ShakeTaskDefinition struct {
	Target *string `json:"target,omitempty"`
	Port   *int64  `json:"port,omitempty"`
	Period *int64  `json:"period,omitempty"`
	Expiry *int64  `json:"expiry,omitempty"`
}

// NewV202101beta1ShakeTaskDefinition instantiates a new V202101beta1ShakeTaskDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV202101beta1ShakeTaskDefinition() *V202101beta1ShakeTaskDefinition {
	this := V202101beta1ShakeTaskDefinition{}
	return &this
}

// NewV202101beta1ShakeTaskDefinitionWithDefaults instantiates a new V202101beta1ShakeTaskDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV202101beta1ShakeTaskDefinitionWithDefaults() *V202101beta1ShakeTaskDefinition {
	this := V202101beta1ShakeTaskDefinition{}
	return &this
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *V202101beta1ShakeTaskDefinition) GetTarget() string {
	if o == nil || o.Target == nil {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1ShakeTaskDefinition) GetTargetOk() (*string, bool) {
	if o == nil || o.Target == nil {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *V202101beta1ShakeTaskDefinition) HasTarget() bool {
	if o != nil && o.Target != nil {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *V202101beta1ShakeTaskDefinition) SetTarget(v string) {
	o.Target = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *V202101beta1ShakeTaskDefinition) GetPort() int64 {
	if o == nil || o.Port == nil {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1ShakeTaskDefinition) GetPortOk() (*int64, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *V202101beta1ShakeTaskDefinition) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *V202101beta1ShakeTaskDefinition) SetPort(v int64) {
	o.Port = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *V202101beta1ShakeTaskDefinition) GetPeriod() int64 {
	if o == nil || o.Period == nil {
		var ret int64
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1ShakeTaskDefinition) GetPeriodOk() (*int64, bool) {
	if o == nil || o.Period == nil {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *V202101beta1ShakeTaskDefinition) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given int64 and assigns it to the Period field.
func (o *V202101beta1ShakeTaskDefinition) SetPeriod(v int64) {
	o.Period = &v
}

// GetExpiry returns the Expiry field value if set, zero value otherwise.
func (o *V202101beta1ShakeTaskDefinition) GetExpiry() int64 {
	if o == nil || o.Expiry == nil {
		var ret int64
		return ret
	}
	return *o.Expiry
}

// GetExpiryOk returns a tuple with the Expiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1ShakeTaskDefinition) GetExpiryOk() (*int64, bool) {
	if o == nil || o.Expiry == nil {
		return nil, false
	}
	return o.Expiry, true
}

// HasExpiry returns a boolean if a field has been set.
func (o *V202101beta1ShakeTaskDefinition) HasExpiry() bool {
	if o != nil && o.Expiry != nil {
		return true
	}

	return false
}

// SetExpiry gets a reference to the given int64 and assigns it to the Expiry field.
func (o *V202101beta1ShakeTaskDefinition) SetExpiry(v int64) {
	o.Expiry = &v
}

func (o V202101beta1ShakeTaskDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Target != nil {
		toSerialize["target"] = o.Target
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.Period != nil {
		toSerialize["period"] = o.Period
	}
	if o.Expiry != nil {
		toSerialize["expiry"] = o.Expiry
	}
	return json.Marshal(toSerialize)
}

type NullableV202101beta1ShakeTaskDefinition struct {
	value *V202101beta1ShakeTaskDefinition
	isSet bool
}

func (v NullableV202101beta1ShakeTaskDefinition) Get() *V202101beta1ShakeTaskDefinition {
	return v.value
}

func (v *NullableV202101beta1ShakeTaskDefinition) Set(val *V202101beta1ShakeTaskDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableV202101beta1ShakeTaskDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableV202101beta1ShakeTaskDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV202101beta1ShakeTaskDefinition(val *V202101beta1ShakeTaskDefinition) *NullableV202101beta1ShakeTaskDefinition {
	return &NullableV202101beta1ShakeTaskDefinition{value: val, isSet: true}
}

func (v NullableV202101beta1ShakeTaskDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV202101beta1ShakeTaskDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
