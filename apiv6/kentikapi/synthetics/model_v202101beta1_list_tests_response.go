/*
 * Synthetics Monitoring API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 202101beta1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synthetics

import (
	"encoding/json"
)

// V202101beta1ListTestsResponse struct for V202101beta1ListTestsResponse
type V202101beta1ListTestsResponse struct {
	Tests             *[]V202101beta1Test `json:"tests,omitempty"`
	InvalidTestsCount *int64              `json:"invalidTestsCount,omitempty"`
}

// NewV202101beta1ListTestsResponse instantiates a new V202101beta1ListTestsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV202101beta1ListTestsResponse() *V202101beta1ListTestsResponse {
	this := V202101beta1ListTestsResponse{}
	return &this
}

// NewV202101beta1ListTestsResponseWithDefaults instantiates a new V202101beta1ListTestsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV202101beta1ListTestsResponseWithDefaults() *V202101beta1ListTestsResponse {
	this := V202101beta1ListTestsResponse{}
	return &this
}

// GetTests returns the Tests field value if set, zero value otherwise.
func (o *V202101beta1ListTestsResponse) GetTests() []V202101beta1Test {
	if o == nil || o.Tests == nil {
		var ret []V202101beta1Test
		return ret
	}
	return *o.Tests
}

// GetTestsOk returns a tuple with the Tests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1ListTestsResponse) GetTestsOk() (*[]V202101beta1Test, bool) {
	if o == nil || o.Tests == nil {
		return nil, false
	}
	return o.Tests, true
}

// HasTests returns a boolean if a field has been set.
func (o *V202101beta1ListTestsResponse) HasTests() bool {
	if o != nil && o.Tests != nil {
		return true
	}

	return false
}

// SetTests gets a reference to the given []V202101beta1Test and assigns it to the Tests field.
func (o *V202101beta1ListTestsResponse) SetTests(v []V202101beta1Test) {
	o.Tests = &v
}

// GetInvalidTestsCount returns the InvalidTestsCount field value if set, zero value otherwise.
func (o *V202101beta1ListTestsResponse) GetInvalidTestsCount() int64 {
	if o == nil || o.InvalidTestsCount == nil {
		var ret int64
		return ret
	}
	return *o.InvalidTestsCount
}

// GetInvalidTestsCountOk returns a tuple with the InvalidTestsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1ListTestsResponse) GetInvalidTestsCountOk() (*int64, bool) {
	if o == nil || o.InvalidTestsCount == nil {
		return nil, false
	}
	return o.InvalidTestsCount, true
}

// HasInvalidTestsCount returns a boolean if a field has been set.
func (o *V202101beta1ListTestsResponse) HasInvalidTestsCount() bool {
	if o != nil && o.InvalidTestsCount != nil {
		return true
	}

	return false
}

// SetInvalidTestsCount gets a reference to the given int64 and assigns it to the InvalidTestsCount field.
func (o *V202101beta1ListTestsResponse) SetInvalidTestsCount(v int64) {
	o.InvalidTestsCount = &v
}

func (o V202101beta1ListTestsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tests != nil {
		toSerialize["tests"] = o.Tests
	}
	if o.InvalidTestsCount != nil {
		toSerialize["invalidTestsCount"] = o.InvalidTestsCount
	}
	return json.Marshal(toSerialize)
}

type NullableV202101beta1ListTestsResponse struct {
	value *V202101beta1ListTestsResponse
	isSet bool
}

func (v NullableV202101beta1ListTestsResponse) Get() *V202101beta1ListTestsResponse {
	return v.value
}

func (v *NullableV202101beta1ListTestsResponse) Set(val *V202101beta1ListTestsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableV202101beta1ListTestsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableV202101beta1ListTestsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV202101beta1ListTestsResponse(val *V202101beta1ListTestsResponse) *NullableV202101beta1ListTestsResponse {
	return &NullableV202101beta1ListTestsResponse{value: val, isSet: true}
}

func (v NullableV202101beta1ListTestsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV202101beta1ListTestsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
