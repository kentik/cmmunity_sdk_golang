/*
 * Synthetics Monitoring API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 202101beta1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synthetics

import (
	"encoding/json"
)

// V202101beta1Country struct for V202101beta1Country
type V202101beta1Country struct {
	Code *string `json:"code,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewV202101beta1Country instantiates a new V202101beta1Country object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV202101beta1Country() *V202101beta1Country {
	this := V202101beta1Country{}
	return &this
}

// NewV202101beta1CountryWithDefaults instantiates a new V202101beta1Country object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV202101beta1CountryWithDefaults() *V202101beta1Country {
	this := V202101beta1Country{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *V202101beta1Country) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1Country) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *V202101beta1Country) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *V202101beta1Country) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V202101beta1Country) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1Country) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V202101beta1Country) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V202101beta1Country) SetName(v string) {
	o.Name = &v
}

func (o V202101beta1Country) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableV202101beta1Country struct {
	value *V202101beta1Country
	isSet bool
}

func (v NullableV202101beta1Country) Get() *V202101beta1Country {
	return v.value
}

func (v *NullableV202101beta1Country) Set(val *V202101beta1Country) {
	v.value = val
	v.isSet = true
}

func (v NullableV202101beta1Country) IsSet() bool {
	return v.isSet
}

func (v *NullableV202101beta1Country) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV202101beta1Country(val *V202101beta1Country) *NullableV202101beta1Country {
	return &NullableV202101beta1Country{value: val, isSet: true}
}

func (v NullableV202101beta1Country) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV202101beta1Country) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
