/*
 * Synthetics Monitoring API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 202101beta1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synthetics

import (
	"encoding/json"
)

// V202101beta1Task struct for V202101beta1Task
type V202101beta1Task struct {
	Id         *string                          `json:"id,omitempty"`
	TestId     *string                          `json:"testId,omitempty"`
	DeviceId   *string                          `json:"deviceId,omitempty"`
	State      *V202101beta1TaskState           `json:"state,omitempty"`
	Status     *string                          `json:"status,omitempty"`
	Family     *V202101beta1IPFamily            `json:"family,omitempty"`
	Ping       *V202101beta1PingTaskDefinition  `json:"ping,omitempty"`
	Traceroute *V202101beta1TraceTaskDefinition `json:"traceroute,omitempty"`
	Http       *V202101beta1HTTPTaskDefinition  `json:"http,omitempty"`
	Knock      *V202101beta1KnockTaskDefinition `json:"knock,omitempty"`
	Dns        *V202101beta1DNSTaskDefinition   `json:"dns,omitempty"`
	Shake      *V202101beta1ShakeTaskDefinition `json:"shake,omitempty"`
}

// NewV202101beta1Task instantiates a new V202101beta1Task object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV202101beta1Task() *V202101beta1Task {
	this := V202101beta1Task{}
	var state V202101beta1TaskState = V202101BETA1TASKSTATE_UNSPECIFIED
	this.State = &state
	var family V202101beta1IPFamily = V202101BETA1IPFAMILY_UNSPECIFIED
	this.Family = &family
	return &this
}

// NewV202101beta1TaskWithDefaults instantiates a new V202101beta1Task object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV202101beta1TaskWithDefaults() *V202101beta1Task {
	this := V202101beta1Task{}
	var state V202101beta1TaskState = V202101BETA1TASKSTATE_UNSPECIFIED
	this.State = &state
	var family V202101beta1IPFamily = V202101BETA1IPFAMILY_UNSPECIFIED
	this.Family = &family
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V202101beta1Task) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1Task) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V202101beta1Task) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *V202101beta1Task) SetId(v string) {
	o.Id = &v
}

// GetTestId returns the TestId field value if set, zero value otherwise.
func (o *V202101beta1Task) GetTestId() string {
	if o == nil || o.TestId == nil {
		var ret string
		return ret
	}
	return *o.TestId
}

// GetTestIdOk returns a tuple with the TestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1Task) GetTestIdOk() (*string, bool) {
	if o == nil || o.TestId == nil {
		return nil, false
	}
	return o.TestId, true
}

// HasTestId returns a boolean if a field has been set.
func (o *V202101beta1Task) HasTestId() bool {
	if o != nil && o.TestId != nil {
		return true
	}

	return false
}

// SetTestId gets a reference to the given string and assigns it to the TestId field.
func (o *V202101beta1Task) SetTestId(v string) {
	o.TestId = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *V202101beta1Task) GetDeviceId() string {
	if o == nil || o.DeviceId == nil {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1Task) GetDeviceIdOk() (*string, bool) {
	if o == nil || o.DeviceId == nil {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *V202101beta1Task) HasDeviceId() bool {
	if o != nil && o.DeviceId != nil {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *V202101beta1Task) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *V202101beta1Task) GetState() V202101beta1TaskState {
	if o == nil || o.State == nil {
		var ret V202101beta1TaskState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1Task) GetStateOk() (*V202101beta1TaskState, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *V202101beta1Task) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given V202101beta1TaskState and assigns it to the State field.
func (o *V202101beta1Task) SetState(v V202101beta1TaskState) {
	o.State = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *V202101beta1Task) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1Task) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *V202101beta1Task) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *V202101beta1Task) SetStatus(v string) {
	o.Status = &v
}

// GetFamily returns the Family field value if set, zero value otherwise.
func (o *V202101beta1Task) GetFamily() V202101beta1IPFamily {
	if o == nil || o.Family == nil {
		var ret V202101beta1IPFamily
		return ret
	}
	return *o.Family
}

// GetFamilyOk returns a tuple with the Family field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1Task) GetFamilyOk() (*V202101beta1IPFamily, bool) {
	if o == nil || o.Family == nil {
		return nil, false
	}
	return o.Family, true
}

// HasFamily returns a boolean if a field has been set.
func (o *V202101beta1Task) HasFamily() bool {
	if o != nil && o.Family != nil {
		return true
	}

	return false
}

// SetFamily gets a reference to the given V202101beta1IPFamily and assigns it to the Family field.
func (o *V202101beta1Task) SetFamily(v V202101beta1IPFamily) {
	o.Family = &v
}

// GetPing returns the Ping field value if set, zero value otherwise.
func (o *V202101beta1Task) GetPing() V202101beta1PingTaskDefinition {
	if o == nil || o.Ping == nil {
		var ret V202101beta1PingTaskDefinition
		return ret
	}
	return *o.Ping
}

// GetPingOk returns a tuple with the Ping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1Task) GetPingOk() (*V202101beta1PingTaskDefinition, bool) {
	if o == nil || o.Ping == nil {
		return nil, false
	}
	return o.Ping, true
}

// HasPing returns a boolean if a field has been set.
func (o *V202101beta1Task) HasPing() bool {
	if o != nil && o.Ping != nil {
		return true
	}

	return false
}

// SetPing gets a reference to the given V202101beta1PingTaskDefinition and assigns it to the Ping field.
func (o *V202101beta1Task) SetPing(v V202101beta1PingTaskDefinition) {
	o.Ping = &v
}

// GetTraceroute returns the Traceroute field value if set, zero value otherwise.
func (o *V202101beta1Task) GetTraceroute() V202101beta1TraceTaskDefinition {
	if o == nil || o.Traceroute == nil {
		var ret V202101beta1TraceTaskDefinition
		return ret
	}
	return *o.Traceroute
}

// GetTracerouteOk returns a tuple with the Traceroute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1Task) GetTracerouteOk() (*V202101beta1TraceTaskDefinition, bool) {
	if o == nil || o.Traceroute == nil {
		return nil, false
	}
	return o.Traceroute, true
}

// HasTraceroute returns a boolean if a field has been set.
func (o *V202101beta1Task) HasTraceroute() bool {
	if o != nil && o.Traceroute != nil {
		return true
	}

	return false
}

// SetTraceroute gets a reference to the given V202101beta1TraceTaskDefinition and assigns it to the Traceroute field.
func (o *V202101beta1Task) SetTraceroute(v V202101beta1TraceTaskDefinition) {
	o.Traceroute = &v
}

// GetHttp returns the Http field value if set, zero value otherwise.
func (o *V202101beta1Task) GetHttp() V202101beta1HTTPTaskDefinition {
	if o == nil || o.Http == nil {
		var ret V202101beta1HTTPTaskDefinition
		return ret
	}
	return *o.Http
}

// GetHttpOk returns a tuple with the Http field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1Task) GetHttpOk() (*V202101beta1HTTPTaskDefinition, bool) {
	if o == nil || o.Http == nil {
		return nil, false
	}
	return o.Http, true
}

// HasHttp returns a boolean if a field has been set.
func (o *V202101beta1Task) HasHttp() bool {
	if o != nil && o.Http != nil {
		return true
	}

	return false
}

// SetHttp gets a reference to the given V202101beta1HTTPTaskDefinition and assigns it to the Http field.
func (o *V202101beta1Task) SetHttp(v V202101beta1HTTPTaskDefinition) {
	o.Http = &v
}

// GetKnock returns the Knock field value if set, zero value otherwise.
func (o *V202101beta1Task) GetKnock() V202101beta1KnockTaskDefinition {
	if o == nil || o.Knock == nil {
		var ret V202101beta1KnockTaskDefinition
		return ret
	}
	return *o.Knock
}

// GetKnockOk returns a tuple with the Knock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1Task) GetKnockOk() (*V202101beta1KnockTaskDefinition, bool) {
	if o == nil || o.Knock == nil {
		return nil, false
	}
	return o.Knock, true
}

// HasKnock returns a boolean if a field has been set.
func (o *V202101beta1Task) HasKnock() bool {
	if o != nil && o.Knock != nil {
		return true
	}

	return false
}

// SetKnock gets a reference to the given V202101beta1KnockTaskDefinition and assigns it to the Knock field.
func (o *V202101beta1Task) SetKnock(v V202101beta1KnockTaskDefinition) {
	o.Knock = &v
}

// GetDns returns the Dns field value if set, zero value otherwise.
func (o *V202101beta1Task) GetDns() V202101beta1DNSTaskDefinition {
	if o == nil || o.Dns == nil {
		var ret V202101beta1DNSTaskDefinition
		return ret
	}
	return *o.Dns
}

// GetDnsOk returns a tuple with the Dns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1Task) GetDnsOk() (*V202101beta1DNSTaskDefinition, bool) {
	if o == nil || o.Dns == nil {
		return nil, false
	}
	return o.Dns, true
}

// HasDns returns a boolean if a field has been set.
func (o *V202101beta1Task) HasDns() bool {
	if o != nil && o.Dns != nil {
		return true
	}

	return false
}

// SetDns gets a reference to the given V202101beta1DNSTaskDefinition and assigns it to the Dns field.
func (o *V202101beta1Task) SetDns(v V202101beta1DNSTaskDefinition) {
	o.Dns = &v
}

// GetShake returns the Shake field value if set, zero value otherwise.
func (o *V202101beta1Task) GetShake() V202101beta1ShakeTaskDefinition {
	if o == nil || o.Shake == nil {
		var ret V202101beta1ShakeTaskDefinition
		return ret
	}
	return *o.Shake
}

// GetShakeOk returns a tuple with the Shake field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1Task) GetShakeOk() (*V202101beta1ShakeTaskDefinition, bool) {
	if o == nil || o.Shake == nil {
		return nil, false
	}
	return o.Shake, true
}

// HasShake returns a boolean if a field has been set.
func (o *V202101beta1Task) HasShake() bool {
	if o != nil && o.Shake != nil {
		return true
	}

	return false
}

// SetShake gets a reference to the given V202101beta1ShakeTaskDefinition and assigns it to the Shake field.
func (o *V202101beta1Task) SetShake(v V202101beta1ShakeTaskDefinition) {
	o.Shake = &v
}

func (o V202101beta1Task) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.TestId != nil {
		toSerialize["testId"] = o.TestId
	}
	if o.DeviceId != nil {
		toSerialize["deviceId"] = o.DeviceId
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Family != nil {
		toSerialize["family"] = o.Family
	}
	if o.Ping != nil {
		toSerialize["ping"] = o.Ping
	}
	if o.Traceroute != nil {
		toSerialize["traceroute"] = o.Traceroute
	}
	if o.Http != nil {
		toSerialize["http"] = o.Http
	}
	if o.Knock != nil {
		toSerialize["knock"] = o.Knock
	}
	if o.Dns != nil {
		toSerialize["dns"] = o.Dns
	}
	if o.Shake != nil {
		toSerialize["shake"] = o.Shake
	}
	return json.Marshal(toSerialize)
}

type NullableV202101beta1Task struct {
	value *V202101beta1Task
	isSet bool
}

func (v NullableV202101beta1Task) Get() *V202101beta1Task {
	return v.value
}

func (v *NullableV202101beta1Task) Set(val *V202101beta1Task) {
	v.value = val
	v.isSet = true
}

func (v NullableV202101beta1Task) IsSet() bool {
	return v.isSet
}

func (v *NullableV202101beta1Task) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV202101beta1Task(val *V202101beta1Task) *NullableV202101beta1Task {
	return &NullableV202101beta1Task{value: val, isSet: true}
}

func (v NullableV202101beta1Task) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV202101beta1Task) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
