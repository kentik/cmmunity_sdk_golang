/*
 * Synthetics Monitoring API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 202101beta1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package syntheticsstub

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A SyntheticsDataServiceApiController binds http requests to an api service and writes the service results to the http response
type SyntheticsDataServiceApiController struct {
	service SyntheticsDataServiceApiServicer
}

// NewSyntheticsDataServiceApiController creates a default api controller
func NewSyntheticsDataServiceApiController(s SyntheticsDataServiceApiServicer) Router {
	return &SyntheticsDataServiceApiController{service: s}
}

// Routes returns all of the api route for the SyntheticsDataServiceApiController
func (c *SyntheticsDataServiceApiController) Routes() Routes {
	return Routes{
		{
			"GetHealthForTests",
			strings.ToUpper("Post"),
			"/synthetics/v202101beta1/health/tests",
			c.GetHealthForTests,
		},
		{
			"GetTraceForTest",
			strings.ToUpper("Post"),
			"/synthetics/v202101beta1/tests/{id}/results/trace",
			c.GetTraceForTest,
		},
	}
}

// GetHealthForTests - Get health status for synthetics test.
func (c *SyntheticsDataServiceApiController) GetHealthForTests(w http.ResponseWriter, r *http.Request) {
	v202101beta1GetHealthForTestsRequest := &V202101beta1GetHealthForTestsRequest{}
	if err := json.NewDecoder(r.Body).Decode(&v202101beta1GetHealthForTestsRequest); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.GetHealthForTests(r.Context(), *v202101beta1GetHealthForTestsRequest)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetTraceForTest - Get trace route data.
func (c *SyntheticsDataServiceApiController) GetTraceForTest(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id := params["id"]
	v202101beta1GetTraceForTestRequest := &V202101beta1GetTraceForTestRequest{}
	if err := json.NewDecoder(r.Body).Decode(&v202101beta1GetTraceForTestRequest); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.GetTraceForTest(r.Context(), id, *v202101beta1GetTraceForTestRequest)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
