/*
 * Synthetics Monitoring API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 202101beta1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package syntheticsstub

import (
	"context"
	"fmt"
	"net/http"
)

// SyntheticsAdminServiceApiService is a service that implents the logic for the SyntheticsAdminServiceApiServicer
// This service should implement the business logic for every endpoint for the SyntheticsAdminServiceApi API.
// Include any external packages or services that will be required by this service.
type SyntheticsAdminServiceApiService struct {
	repo *SyntheticsRepo
}

// NewSyntheticsAdminServiceApiService creates a default api service
func NewSyntheticsAdminServiceApiService(repo *SyntheticsRepo) SyntheticsAdminServiceApiServicer {
	return &SyntheticsAdminServiceApiService{
		repo: repo,
	}
}

// AgentDelete - Delete an agent.
func (s *SyntheticsAdminServiceApiService) AgentDelete(ctx context.Context, agentId string) (ImplResponse, error) {
	if err := s.repo.DeleteAgent(agentId); err != nil {
		return errorResponse(http.StatusNotFound, "agent DELETE failed", err), nil
	} else {
		resp := map[string]interface{}{}
		return Response(http.StatusOK, &resp), nil
	}
}

// AgentGet - Get information about an agent.
func (s *SyntheticsAdminServiceApiService) AgentGet(ctx context.Context, agentId string) (ImplResponse, error) {
	if agent := s.repo.GetAgent(agentId); agent == nil {
		err := fmt.Errorf("no such agent %q", agentId)
		return errorResponse(http.StatusNotFound, "agent GET failed", err), nil
	} else {
		resp := V202101beta1GetAgentResponse{Agent: *agent}
		return Response(http.StatusOK, &resp), nil
	}
}

// AgentPatch - Patch an agent.
func (s *SyntheticsAdminServiceApiService) AgentPatch(ctx context.Context, agentId string, v202101beta1PatchAgentRequest V202101beta1PatchAgentRequest) (ImplResponse, error) {
	v202101beta1PatchAgentRequest.Agent.Id = agentId
	if agent, err := s.repo.PatchAgent(v202101beta1PatchAgentRequest.Agent); err != nil {
		return errorResponse(http.StatusBadRequest, "agent PATCH failed", err), nil
	} else {
		resp := V202101beta1PatchAgentResponse{Agent: *agent}
		return Response(http.StatusOK, &resp), nil
	}
}

// AgentsList - List Agents.
func (s *SyntheticsAdminServiceApiService) AgentsList(ctx context.Context) (ImplResponse, error) {
	resp := V202101beta1ListAgentsResponse{
		Agents:             s.repo.ListAgents(),
		InvalidAgentsCount: 0,
	}
	return Response(http.StatusOK, &resp), nil
}

// TestCreate - Create Synthetics Test.
func (s *SyntheticsAdminServiceApiService) TestCreate(ctx context.Context, v202101beta1CreateTestRequest V202101beta1CreateTestRequest) (ImplResponse, error) {
	if test, err := s.repo.CreateTest(v202101beta1CreateTestRequest.Test); err != nil {
		return errorResponse(http.StatusBadRequest, "test CREATE failed", err), nil
	} else {
		resp := V202101beta1CreateTestResponse{Test: *test}
		return Response(http.StatusOK, &resp), nil
	}
}

// TestDelete - Delete an Synthetics Test.
func (s *SyntheticsAdminServiceApiService) TestDelete(ctx context.Context, id string) (ImplResponse, error) {
	if err := s.repo.DeleteTest(id); err != nil {
		return errorResponse(http.StatusNotFound, "test DELETE failed", err), nil
	} else {
		resp := map[string]interface{}{}
		return Response(http.StatusOK, &resp), nil
	}
}

// TestGet - Get information about Synthetics Test.
func (s *SyntheticsAdminServiceApiService) TestGet(ctx context.Context, id string) (ImplResponse, error) {
	if test := s.repo.GetTest(id); test == nil {
		err := fmt.Errorf("no such test %q", id)
		return errorResponse(http.StatusNotFound, "test GET failed", err), nil
	} else {
		resp := V202101beta1GetTestResponse{Test: *test}
		return Response(http.StatusOK, &resp), nil
	}
}

// TestPatch - Patch a Synthetics Test.
func (s *SyntheticsAdminServiceApiService) TestPatch(ctx context.Context, id string, v202101beta1PatchTestRequest V202101beta1PatchTestRequest) (ImplResponse, error) {
	v202101beta1PatchTestRequest.Test.Id = id
	if test, err := s.repo.PatchTest(v202101beta1PatchTestRequest.Test); err != nil {
		return errorResponse(http.StatusBadRequest, "test PATCH failed", err), nil
	} else {
		resp := V202101beta1PatchTestResponse{Test: *test}
		return Response(http.StatusOK, &resp), nil
	}
}

// TestStatusUpdate - Update a test status.
func (s *SyntheticsAdminServiceApiService) TestStatusUpdate(ctx context.Context, id string, v202101beta1SetTestStatusRequest V202101beta1SetTestStatusRequest) (ImplResponse, error) {
	if err := s.repo.UpdateTestStatus(id, v202101beta1SetTestStatusRequest.Status); err != nil {
		return errorResponse(http.StatusNotFound, "test status update failed", err), nil
	} else {
		resp := map[string]interface{}{}
		return Response(http.StatusOK, &resp), nil
	}
}

// TestsList - List Synthetics Tests.
func (s *SyntheticsAdminServiceApiService) TestsList(ctx context.Context, preset bool) (ImplResponse, error) {
	resp := V202101beta1ListTestsResponse{
		Tests:             s.repo.ListTests(),
		InvalidTestsCount: 0,
	}
	return Response(http.StatusOK, &resp), nil
}

func errorResponse(httpCode int, message string, err error) ImplResponse {
	const rpcCodeUnknown = 2 // translation httpCode -> rpcCode not relevant here

	rpcResponse := RpcStatus{
		Code:    rpcCodeUnknown,
		Message: fmt.Sprintf("%v: %v", message, err.Error()),
		Details: []ProtobufAny{},
	}
	return Response(httpCode, rpcResponse)
}
